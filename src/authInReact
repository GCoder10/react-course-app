1. Auth Form - Auth Folder
2. Auth Form - Local State a nie redux State
    Local State - konfiguracja formularza.
    Dodanie wlasnych validatorow do formularza.
    Pole hasla - minimalna ilosc znakow - wlasny validator
    Dynamicznie generowane inputy
3. Dodanie formularza do routingu:
    Jedyne miejsce z routingiem - App.js
4. Otworzenie formularza:
    Navigation
    NavigationItems.js
    Tutaj linki
    Nowy z formularzem
5. Auth.css
    Import Auth.css in Auth.js
6. checkValidity - wlasne validatory.
7. Update inputow - kopia calego state, zmiana jednego inputu.
    Sprawdzanie poprawnosci na bierzaco:
        Przekazanie do metody checkValidity aktualnej wartosci
        pola oraz zasad z Local State, wedlug ktorych dane pole ma
        byc sprawdzane.
    touched: true - przy jakiejkolwiek zmianie, pole oznaczone
    jako naruszone / zmienione.
    this.setState - zapisanie zmian w Local State.
8. SUBMIT form:
    Nowe akcje - actions/auth.js
        Wybor akcji = operacja na redux global state

    Nowe akcje - actionTypes.js
    Wyeksportowanie akcji na zewnatrz - actions/index.js
    Zaimportowanie actions/index.js w Auth.js
    Przekazanie do actions wartosci pola email oraz wartosci
    pola password.
9. Token z backendu:
    actions/auth.js
    Wykonanie zapytania POST przy pomocy AXIOS do backendu,
    wywolanie kolejnej akcji na podstawie zwroconych danych.
    W ciele zapytania obiekt zawierajacy dane rejestracyjne.
10. Logowanie:
    isSignup - zmienna w local state okreslajaca czy jestesmy
    na stronie rejestracji, jezeli tak to przycisk bedzie 
    wyswietlal przejscie do strony logowania i odwrotnie.
    switchAuthModeHandler - metoda zmieni wartosc isSignup
    na przeciwna.
    actions/auth.js:
        Jezeli zmienne przyjda z isSignup mode = true, to 
        rejestracja, jezeli false: logowanie.
11. Przechowywanie tokenu:
    actions/auth.js:
        Z obiektu ktory wrocil z backend'u przekazujemy do 
        reducera token i userId, wywolujemy odpowiednia akcje
        przekazujac te dane dalej do reducera.
    reducers/auth.js:
        Autoryzacyjny reducer, zapisze token i userId w 
        redux'owym globalnym state aplikacji po otrzymaniu
        ich z actions.
    index.js:
        Nowy auth reducer dodany do combineReducers, aby byl
        dostepny w innych miejscach w projekcie.
12. Spinner podczas logowania / rejestracji:
    Auth.js:
        Jezeli loading z auth redux global state jest true,
        to Spinner.
    Error's:
    actions/auth.js:
        Po otrzymaniu bledu z obiektu bledu, blad jest
        przekazywany do reducera.
    Auth.js:
        Jezeli w auth reducer jest zapisany blad, to 
        wyswietlenie go.
13. Wylogowanie:
    Wykorzystanie czasu wygasniecia tokenu.
    actions/auth.js:
        Po poprawnym zalogowaniu sie, z obiektu z backend'u
        mozna odczytac czas wygasniecia tokenu, ta informacja
        zostanie przekazana do nowej akcji, ktora wykona 
        kolejna akcje po okreslonym czasie ( czas wygasniecia
        tokenu ).
        logout
    reducers/auth.js:
        authLogout - usunie obecnie przechowywany token i 
        userId w redux'owym globalnym state aplikacji.
    Czyli po prostu nastapi wylogowanie.
14. "Auth Req":
    Wysylanie zapytan do backend'u z tokenem:
    Token przechowywany jest w redux global state a potrzebny
    jest w actions.
    actions/order.js:
        funkcja oczekuje tokenu z zewnatrz, ktory zostanie
        uzyty podczas zapytania.
    Token przekazany z Orders.js
15. UI with token:
    Po zalogowaniu sie, opcja wyloguj:
    hoc/Layout.js:
    Paski nawigacyjne, tutaj uzyskac dostep do redux global 
    state, pobrac token i taka informacje wyslac do 
    NavigationItem, zostanie to uzyte do zmieniania UI w 
    zaleznosci, czy user jest zalogowany.
    Wyslany do Toolbar.

    NavigationItems otrzymuje informacje o tokenie (bool)
    z obu zrodel: SideDrawer.js, Toolbar.js 

    NavigationItems.js:
    Wyswietlanie linku w zaleznosci od zalogowania sie.
16. Dzialajacy Logout:
    Auth/Logout:
    Plik potrzebny do wywolania akcji do wylogowania.
    Akcja wykona sie na starcie pracy komponentu.
    Po wylogowaniu sie, przekierowanie na strone glowna:
    Redirect
    App.js:
    Dodanie Logout.js do routingu.
17. Poprawki UI:
    Auth.js:
    Redirect jezeli user jest zalogowany.
    Po zalogowaniu sie, przekierowanie na strone glowna.


    zamowienie burgera jezeli user jest zalogowany:
    BurgerBuilder.js
    Wykorzystanie tokenu zeby spr. czy jest zal.
    ORDER NOW zachowanie zalezne od isAuth
    BuildControls.js


    BurgerBuilder.js:
    Zal. - moze zamowic
    nieZal - przekierowanie na strone rejestracji
    purchaseHandler()
18. Po rejestracji zeby nie stracic konfiguracji burgera:
    