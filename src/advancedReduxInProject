1. Installing the Redux Devtools:

    Polaczenie rozszerzenia Chrome do sledzenia state
    aplikacji z naszym web api:

    index.js
        const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());

2. Preparing the Folder Structure:

    Podzielenie glownego pliku store ( redux ) na podfoldery:
    - actions
    - reducers

    actionTypes - przerobienie actions na funkcje

    dodanie kolejnych plikow w actions, w ktorych poszczegolne
    akcje beda realizowane jako funkcje.

    Podzial reduxowego store na pliki, ktore beda zwiazane tylko z
    okreslonymi zadaniami w api, np. zamowienia.

3. Creating Action Creators:

    Dwa oddzielne pliki zwiazane ze zmianami state apki 
    w okreslonym obszarze, korzystaja z jednego 
    actionTypes, sa w formie funkcji.
    1. Plik actions wywola jakas akcje
    2. Zmiana state api przez reducera


    Aktualizacja index.js aby uzyc danego reducera
    Uzycie wszystkich na raz pozniej.

    Zebranie wszystkich akcji w actions/index.js
    Z tego pliku beda brane akcje w innych miejscach w api.
    
4. Async Code:

    Instalacja redux-thunk
    Uzycie redux-thunk, middleware, compose w glownym pliku
    index.js

5. Using Async Code:

    Kod asynchroniczny na zaladowanie skladnikow w apce z
    serwera.
    1. actionTypes - SET_INGREDIENTS
    2. actions -> :
        jedna funkcja czeka na dane z serwera po czym wywoluje
        inna, druga, aby otrzymane dane zostaly przekazane dalej
        do reducera, ktory umiesci je w globalnym redux'owym
        state aplikacji.
        Logika:
            Otrzymane dane - wywolanie funkcji do przekazania danych
            do reducera
            Blad - wywolanie funkcji do obslugi bledu

6. Using data after fetch from server:

    1. napisanie SET_INGREDIENTS w reducer.
    2. napisanie FETCH_INGREDIENTS_FAILED w reducer.

    Standardowo, kopia state, potem jego modyfikacja.

    Po dodaniu w reducer, trzeba polaczyc to z kontenerem.
    Odwolanie sie do actions aby pobrac poczatkowe dane o
    skladnikach z serwera w kontenerze.
    Dane zostana pobrane przy starcie pracy kontenera.

7. Order by actions:

    Tak samo, metoda ktora wywola inna metode jezeli uda sie
    zamowic Burgera, przekaze dane zamowienia dalej do innej
    metody, ktora wysle to do reducera a on do state apki.
    Jezeli nie uda zlozyc sie zamowienia, wtedy wywolanie 
    metody z bledem.

8. Polaczenie order actions z kontenerem:

    Polaczenie z funkcja purchaseBurgerStart, ktora wywola
    odpowiednia funkcje w zaleznosci od sukcesu operacji.

9. Order Reducer:

    Reducer - wykonanie odpowiedniej operacji na redux'owym
    state aplikacji w zaleznosci od wczesniej wybranej akcji i
    przekazanych danych.

10. Order Actions.
11. Improve UX:

    Zanim jeszcze skladniki sie pobiora, sa jako null i 
    wystapi blad.
    Uzycie Redirect komponent
    Jezeli skladniki juz dotarly, to wczytaj komponent, jezeli
    nie, to przekierowanie na strone glowna.
    Checkout.js

12. Combining Reducers:

    W tej apce sa dwa: burgerBuilder i order.
    Glowny plik index.js
    combineReducers
    Utworzenie rootReducer - stala, ktora bedzie zawierala
    oba reducery.
